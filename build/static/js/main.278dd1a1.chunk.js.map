{"version":3,"sources":["RequestForm.js","App.js","reportWebVitals.js","index.js"],"names":["RequestForm","useState","firstName","setFirstName","lastName","setLastName","email","setEmail","firstNameError","setFirstNameError","lastNameError","setLastNameError","emailError","setEmailError","submitted","setSubmitted","className","onSubmit","e","preventDefault","htmlFor","name","id","data-testid","value","onChange","target","type","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAGaA,G,MAAc,WAAO,IAAD,EACGC,mBAAS,IADZ,mBACxBC,EADwB,KACbC,EADa,OAECF,mBAAS,IAFV,mBAExBG,EAFwB,KAEdC,EAFc,OAGLJ,mBAAS,IAHJ,mBAGxBK,EAHwB,KAGjBC,EAHiB,OAiBaN,mBAAS,IAjBtB,mBAiBxBO,EAjBwB,KAiBRC,EAjBQ,OAkBWR,mBAAS,IAlBpB,mBAkBxBS,EAlBwB,KAkBTC,EAlBS,OAmBKV,mBAAS,IAnBd,mBAmBxBW,EAnBwB,KAmBZC,EAnBY,OAqBGZ,oBAAS,GArBZ,mBAqBxBa,EArBwB,KAqBbC,EArBa,KAmC/B,OAAOD,EACL,iFAEA,uBAAME,UAAU,cAAcC,SAfX,SAAAC,GACnBA,EAAEC,iBAEFV,EAAkBP,EAAY,GAAK,gCACnCS,EAAiBP,EAAW,GAAK,+BACjCS,EAAcP,EAAQ,GAAK,2BAEvBJ,GAAaE,GAAYE,GAC3BS,GAAa,IAOf,UACE,sBAAKC,UAAS,mBAAcR,EAAiB,SAAW,IAAxD,UACE,uBAAOY,QAAQ,YAAf,wBACA,uBACEC,KAAK,YACLC,GAAG,YACHC,cAAY,YACZC,MAAOtB,EACPuB,SAzCsB,SAAAP,GAC5Bf,EAAae,EAAEQ,OAAOF,aA2CnBhB,GAAkB,mBAAGQ,UAAU,eAAb,SAA6BR,IAChD,sBAAKQ,UAAS,mBAAcN,EAAgB,SAAW,IAAvD,UACE,uBAAOU,QAAQ,WAAf,uBACA,uBACEC,KAAK,WACLC,GAAG,WACHC,cAAY,WACZC,MAAOpB,EACPqB,SAhDqB,SAAAP,GAC3Bb,EAAYa,EAAEQ,OAAOF,aAkDlBd,GAAiB,mBAAGM,UAAU,eAAb,SAA6BN,IAC/C,sBAAKM,UAAS,mBAAcJ,EAAa,SAAW,IAApD,UACE,uBAAOQ,QAAQ,QAAf,mBACA,uBACEO,KAAK,QACLN,KAAK,QACLC,GAAG,QACHC,cAAY,QACZC,MAAOlB,EACPmB,SAxDkB,SAAAP,GACxBX,EAASW,EAAEQ,OAAOF,aA0DfZ,GAAc,mBAAGI,UAAU,eAAb,SAA6BJ,IAC5C,wBAAQe,KAAK,SAAb,+BCzEOC,EAAM,WACjB,OACE,iCACE,2DACA,cAAC,EAAD,QCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.278dd1a1.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './RequestForm.css'\n\nexport const RequestForm = () => {\n  const [firstName, setFirstName] = useState('')\n  const [lastName, setLastName] = useState('')\n  const [email, setEmail] = useState('')\n\n  const handleFirstNameChange = e => {\n    setFirstName(e.target.value)\n  }\n\n  const handleLastNameChange = e => {\n    setLastName(e.target.value)\n  }\n\n  const handleEmailChange = e => {\n    setEmail(e.target.value)\n  }\n\n  const [firstNameError, setFirstNameError] = useState('')\n  const [lastNameError, setLastNameError] = useState('')\n  const [emailError, setEmailError] = useState('')\n\n  const [submitted, setSubmitted] = useState(false)\n\n  const handleSubmit = e => {\n    e.preventDefault()\n\n    setFirstNameError(firstName ? '' : 'First Name field is required')\n    setLastNameError(lastName ? '' : 'Last Name field is required')\n    setEmailError(email ? '' : 'Email field is required')\n\n    if (firstName && lastName && email) {\n      setSubmitted(true)\n    }\n  }\n\n  return submitted ? (\n    <p>Thank you! We will be in touch with you shortly.</p>\n  ) : (\n    <form className=\"requestForm\" onSubmit={handleSubmit}>\n      <div className={`formGroup${firstNameError ? ' error' : ''}`}>\n        <label htmlFor=\"firstName\">First Name</label>\n        <input\n          name=\"firstName\"\n          id=\"firstName\"\n          data-testid=\"firstName\"\n          value={firstName}\n          onChange={handleFirstNameChange}\n        />\n      </div>\n      {firstNameError && <p className=\"errorMessage\">{firstNameError}</p>}\n      <div className={`formGroup${lastNameError ? ' error' : ''}`}>\n        <label htmlFor=\"lastName\">Last Name</label>\n        <input\n          name=\"lastName\"\n          id=\"lastName\"\n          data-testid=\"lastName\"\n          value={lastName}\n          onChange={handleLastNameChange}\n        />\n      </div>\n      {lastNameError && <p className=\"errorMessage\">{lastNameError}</p>}\n      <div className={`formGroup${emailError ? ' error' : ''}`}>\n        <label htmlFor=\"email\">Email</label>\n        <input\n          type=\"email\"\n          name=\"email\"\n          id=\"email\"\n          data-testid=\"email\"\n          value={email}\n          onChange={handleEmailChange}\n        />\n      </div>\n      {emailError && <p className=\"errorMessage\">{emailError}</p>}\n      <button type=\"submit\">Request Demo</button>\n    </form>\n  )\n}\n","import './App.css'\nimport { RequestForm } from './RequestForm'\n\nexport const App = () => {\n  return (\n    <main>\n      <h1>TDD for Building UIs Demo</h1>\n      <RequestForm />\n    </main>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}